# Rainfall Prediction Model üåßÔ∏è

## Overview üåü
This project is a **Rainfall Prediction** model developed using a **Random Forest Classifier**. The model predicts whether it will rain based on various meteorological features such as pressure, temperature, humidity, and wind speed. It is trained using a dataset with historical weather data and is balanced using **resampling techniques** to handle class imbalance.

---

## Steps Followed üîÑ

### 1. **Data Preprocessing**:
   - Loaded the dataset using Pandas.
   - Removed any leading or trailing spaces from column names.
   - **Missing values** in the dataset were handled:
     - Filled `winddirection` missing values with the **mode** (most frequent value).
     - Filled `windspeed` missing values with the **median** value.
   
### 2. **Label Encoding**:
   - The target variable (`rainfall`) was **label encoded** to convert categorical values ('Yes' and 'No') into numeric values (1 and 0).

### 3. **Resampling**:
   - The dataset was **imbalanced**, with fewer 'rainfall' instances compared to 'no rainfall'. 
   - The **undersampled class** (`no`) was resampled using **bootstrapping** to match the size of the majority class (`yes`).

### 4. **Splitting Data**:
   - The data was split into training and test sets using an **80-20 split**.

### 5. **Feature Scaling**:
   - Standardized the training and test features using **StandardScaler** to bring them onto the same scale, ensuring that the model performs optimally.

### 6. **Model Training**:
   - A **Random Forest Classifier** was trained on the preprocessed data.

### 7. **Cross-Validation**:
   - The model was evaluated using **5-fold cross-validation** to assess the model's performance and reliability across different subsets of the data.

### 8. **Model Evaluation**:
   - **Accuracy** was computed for both training and testing data.
   - The **Confusion Matrix** and **Classification Report** were also generated (though commented out for now).

### 9. **Prediction**:
   - For new data, a **sample input** with weather-related features (such as pressure, temperature, humidity, wind direction, etc.) is passed to the model for prediction.
   - The model outputs whether rainfall is expected (`Prediction: Rainfall`) or not (`Prediction: No Rainfall`).

---

## Installation & Requirements üì¶

- **Python 3.x** 
- **Libraries**:
    - pandas
    - numpy
    - matplotlib
    - seaborn
    - scikit-learn
    - RandomForestClassifier
    - StandardScaler

Install the required libraries using:
```bash
pip install pandas numpy matplotlib seaborn scikit-learn
