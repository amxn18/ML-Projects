# 🩺 Breast Cancer Classification Project 🧬
A machine learning project to classify whether a tumor is **Benign** or **Malignant** using real-world breast cancer data.

## 📂 Dataset
- Source: `data.csv` from the Breast Cancer Wisconsin (Diagnostic) dataset.
- Features: 30 numeric measurements per tumor (e.g., radius, texture, perimeter).
- Target: `diagnosis` (B → 0: Benign, M → 1: Malignant)

## 🛠️ Workflow

1. 🧹 **Preprocessing**
   - Dropped irrelevant columns: `id`, `Unnamed: 32`
   - Label encoding: `diagnosis` converted from M/B to 1/0
   - Train-test split: 80% training, 20% testing
   - Standardized features using `StandardScaler`

2. 🤖 **Models Used**
   - **Logistic Regression**
   - **Support Vector Classifier (SVC)** with linear kernel

3. 🔍 **Evaluation**
   - Accuracy on both training and testing sets
   - Custom input prediction support

4. 🧠 **Interactive Prediction**
   ```python
   Enter 30 feature values separated by space:
   ```
   Predicts tumor type using both models:
   - 🧠 Logistic Regression
   - 🤖 SVM

## 🧪 Results

| Model                | Training Accuracy | Testing Accuracy |
|---------------------|-------------------|------------------|
| Logistic Regression | ~99.5% ✅          | ~96.5% ✅         |
| SVC (Linear Kernel) | ~98.9% ✅          | ~98.2% ✅         |

## 💡 Notes

- **Feature scaling** was crucial for model performance, especially for SVMs.
- Both models showed **very high accuracy**, indicating effective separation of classes in feature space.
- Dataset was clean and well-balanced, reducing preprocessing effort.

## 🔮 About the Predictive Input
The user can input **30 comma/space-separated values** corresponding to all features. These are scaled and passed to both trained models, which return predictions.

## 📉 Why not use our custom SVM here?
Although we built a custom SVM from scratch earlier, it:
- Was **linear-only**
- Lacked efficient optimization like **SMO**
- Had no **vectorization**
- Did not include **tolerance**, **convergence**, or **slack variable optimization**

Hence, scikit-learn’s implementation outperforms it significantly in real-world datasets like this.

---


